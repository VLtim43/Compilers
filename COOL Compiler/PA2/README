# README file for Programming Assignment 2 (C++ edition)

Your directory should now contain the following files:

Makefile -> [course dir]/src/PA2/Makefile
README
cool.flex
test.cl
lextest.cc -> [course dir]/src/PA2/lextest.cc
mycoolc -> [course dir]/src/PA2/mycoolc
stringtab.cc -> [course dir]/src/PA2/stringtab.cc
utilities.cc -> [course dir]/src/PA2/utilities.cc
handle*flags.cc -> [course dir]/src/PA2/handle_flags.cc
*.d dependency files
\_.\* other generated files

The include (.h) files for this assignment can be found in
[course dir]/include/PA2

    The Makefile contains targets for compiling and running your
    program. DO NOT MODIFY.

    The README contains this info. Part of the assignment is to fill
    the README with the write-up for your project. You should
    explain design decisions, explain why your code is correct, and
    why your test cases are adequate. It is part of the assignment
    to clearly and concisely explain things in text as well as to
    comment your code. Just edit this file.

    cool.flex is a skeleton file for the specification of the
    lexical analyzer. You should complete it with your regular
    expressions, patterns and actions. Information on how to do this
    is in the flex manual, which is part of your reader.

    test.cl is a COOL program that you can test the lexical
    analyzer on. It contains some errors, so it won't compile with
    coolc. However, test.cl does not exercise all lexical
    constructs of COOL and part of your assignment is to rewrite
    test.cl with a complete set of tests for your lexical analyzer.

    cool-parse.h contains definitions that are used by almost all parts
    of the compiler. DO NOT MODIFY.

    stringtab.{cc|h} and stringtab_functions.h contains functions
        to manipulate the string tables.  DO NOT MODIFY.

    utilities.{cc|h} contains functions used by the main() part of
    the lextest program. You may want to use the strdup() function
    defined in here. Remember that you should not print anything
    from inside cool.flex! DO NOT MODIFY.

    lextest.cc contains the main function which will call your
    lexer and print out the tokens that it returns.  DO NOT MODIFY.

    mycoolc is a shell script that glues together the phases of the
    compiler using Unix pipes instead of statically linking code.
    While inefficient, this architecture makes it easy to mix and match
    the components you write with those of the course compiler.
    DO NOT MODIFY.

        cool-lexer.cc is the scanner generated by flex from cool.flex.
        DO NOT MODIFY IT, as your changes will be overritten the next
        time you run flex.

The \*.d files are automatically generated Makefiles that capture
dependencies between source and header files in this directory.
These files are updated automatically by Makefile; see the gmake
documentation for a detailed explanation.

## Instructions

    To compile your lextest program type:

    % gmake lexer

    Run your lexer by putting your test input in a file 'foo.cl' and
    run the lextest program:

    % ./lexer foo.cl

    To run your lexer on the file test.cl type:

    % gmake dotest

    If you think your lexical analyzer is correct and behaves like
    the one we wrote, you can actually try 'mycoolc' and see whether
    it runs and produces correct code for any examples.
    If your lexical analyzer behaves in an
    unexpected manner, you may get errors anywhere, i.e. during
    parsing, during semantic analysis, during code generation or
    only when you run the produced code on spim. So beware.

    To turnin your work type:

    % gmake submit-clean

    And run the "submit" program following the instructions on the
    course web page.

    Running "submit" will collect the files cool.flex, test.cl,
    README, and test.output. Don't forget to edit the README file to
    include your write-up, and to write your own test cases in
    test.cl.

You may turn in the assignment as many times as you like.
However, only the last version will be retained for
grading.

    If you change architectures you must issue

    % gmake clean

    when you switch from one type of machine to the other.
    If at some point you get weird errors from the linker,
    you probably forgot this step.

    GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

This is the Lexical Analyzer for the Cool language, built using the **Flex** tool.  
Initially, I had trouble compiling and initializing the program, but after a few attempts, I was able to understand the basic premise of how Flex works.
I had to uninstall the "flex" package and use "flex-old" instead, as the former simply didn’t work with the environment provided by the assignment.  
Once I was able to run the makefile, I wrote a small shell script to also run `gmake clean` and `./lexer test.cl`, making it easier to develop and debug each step.

First, we handle comments, which can be either single-line (`--`) or multi-line. We support nested comments by keeping track of the comment depth.  
Two specific errors are thrown: one when encountering an EOF inside a comment and another when an unmatched `*)` is found.  
Strings were harder to match than I expected. Valid strings are enclosed in double quotes (`"`), and we support escape characters like `\n` and `\t`. Malformed strings move the state to `STATE_STRING_ERROR`, which attempts to recover errors and prevent cascading failures. We use `string_buf_ptr` and `string_buf` to keep track of string sizes.

Next, we match keywords and operators. I couldn’t find a better way to match the different cases for keywords besides using a regex pair for each letter.  
Throughout the program, we keep track of new lines using `curr_lineno`.

`test.cl` is used as an example to verify that the Lexer is working. its current implementation was (intentionally) incorrect, and even more erros were added
to check the Lexer
